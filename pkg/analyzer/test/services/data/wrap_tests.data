>>> list literal
main() {
  List<String> values = <String>[a0123456789012345, b0123456789012345, c0123456789012345, d0123456789012345];
}
<<<
main() {
  List<String> values = <String>[
      a0123456789012345,
      b0123456789012345,
      c0123456789012345,
      d0123456789012345];
}
>>> assignment - initializer doesn't fit one line, wrap inside, keep name
main() {
  result = myFunction(a0123456789012345 * b0123456789012345, c0123456789012345 * d0123456789012345);
}
<<<
main() {
  result = myFunction(
      a0123456789012345 * b0123456789012345,
      c0123456789012345 * d0123456789012345);
}
>>> assignment - initializer fits one line
main() {
  variableLoooooooooooooooong = functionLoooooooooooooooooooooooooooooooooooooong(1, 2, 3, 4);
}
<<<
main() {
  variableLoooooooooooooooong =
      functionLoooooooooooooooooooooooooooooooooooooong(1, 2, 3, 4);
}
>>> assignment - initializer doesn't fit one line, name too long
main() {
  variableLooooooooooooooooooong = functionLoooooooooooooooooooooooooooooooooooong(a0123456789012345 * b0123456789012345, c0123456789012345 * d0123456789012345);
}
<<<
main() {
  variableLooooooooooooooooooong =
      functionLoooooooooooooooooooooooooooooooooooong(
          a0123456789012345 * b0123456789012345,
          c0123456789012345 * d0123456789012345);
}
>>> variable declaration - initializer doesn't fit one line, wrap inside, keep name
main() {
  var result = myFunction(a0123456789012345 * b0123456789012345, c0123456789012345 * d0123456789012345);
}
<<<
main() {
  var result = myFunction(
      a0123456789012345 * b0123456789012345,
      c0123456789012345 * d0123456789012345);
}
>>> variable declaration - initializer fits one line
main() {
  var variableLoooooooooooooooong = functionLoooooooooooooooooooooooooooooooooooong(1, 2, 3, 4);
}
<<<
main() {
  var variableLoooooooooooooooong =
      functionLoooooooooooooooooooooooooooooooooooong(1, 2, 3, 4);
}
>>> variable declaration - initializer doesn't fit one line, name too long
main() {
  var variableLoooooooooooooooong = functionLoooooooooooooooooooooooooooooooooooong(a0123456789012345 * b0123456789012345, c0123456789012345 * d0123456789012345);
}
<<<
main() {
  var variableLoooooooooooooooong =
      functionLoooooooooooooooooooooooooooooooooooong(
          a0123456789012345 * b0123456789012345,
          c0123456789012345 * d0123456789012345);
}
>>> variable declaration - with binary expression
main() {
  int result = a01234567890123456789 * b01234567890123456789 + c01234567890123456789 * d01234567890123456789;
}
<<<
main() {
  int result =
      a01234567890123456789 * b01234567890123456789 +
      c01234567890123456789 * d01234567890123456789;
}
>>> arguments
main() {
  myFunction(a0123456789012345 * b0123456789012345, c0123456789012345 * d0123456789012345);
}
<<<
main() {
  myFunction(
      a0123456789012345 * b0123456789012345,
      c0123456789012345 * d0123456789012345);
}
>>> arguments, nested
main() {
  someFunctionOne(a012345678901234567890123456789,
    someFunctionTwo(ba01234567890123456789, bb01234567890123456789, bc01234567890123456789),
    someFunctionTwo(ca01234567890123456789, cb01234567890123456789, cc01234567890123456789),
    d012345678901234567890123456789, e012345678901234567890123456789);
}
<<<
main() {
  someFunctionOne(
      a012345678901234567890123456789,
      someFunctionTwo(
          ba01234567890123456789,
          bb01234567890123456789,
          bc01234567890123456789),
      someFunctionTwo(
          ca01234567890123456789,
          cb01234567890123456789,
          cc01234567890123456789),
      d012345678901234567890123456789,
      e012345678901234567890123456789);
}
>>> conditions, same operator
main() {
  if (a012345678901234567890123456789 || b012345678901234567890123456789 || c012345678901234567890123456789
                  || d012345678901234567890123456789) {
  }
}
<<<
main() {
  if (a012345678901234567890123456789 ||
      b012345678901234567890123456789 ||
      c012345678901234567890123456789 ||
      d012345678901234567890123456789) {
  }
}
>>> conditions, different operators
main() {
  if (a012345678901234567890123456789 && b012345678901234567890123456789 || c012345678901234567890123456789
                  && d012345678901234567890123456789) {
  }
}
<<<
main() {
  if (a012345678901234567890123456789 && b012345678901234567890123456789 ||
      c012345678901234567890123456789 && d012345678901234567890123456789) {
  }
}
>>> conditional expression
main() {
  MatchKind kind = element != null ? a012345678901234567890123456789 : b012345678901234567890123456789;
}
<<<
main() {
  MatchKind kind = element != null ?
      a012345678901234567890123456789 :
      b012345678901234567890123456789;
}
>>> expression function body
myFunction() => a012345678901234567890123456789 + b012345678901234567890123456789;
<<<
myFunction() =>
    a012345678901234567890123456789 + b012345678901234567890123456789;
